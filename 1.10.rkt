#lang racket
(require racket/trace)

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
(A 1 10) ; 1024
(A 2 4)  ; 65536
(A 3 3)  ; 65536
;; (A 3 3)
;; (A 2 4)
;; (A 1 16)
;; (A 0 65536)


(A 2 3)
;; (A 2 3)
;; (A 1 (A 2 2))
;; (A 1 (A 1 (A 2 1)))
;; (A 1 (A 1 2)))
;; (A 1 (A 0 (A 1 1))))
;; (A 1 (A 0 2)))
;; (A 1 4)
;; (A 1 (A 1 3))
;; (A 1 (A 0 (A 1 2)))
;; ...
;; 16


;; 2n
(define (f n) (A 0 n))
;; 2^n
(define (g n) (A 1 n))
;; 2^(2^n-1)
(define (h n) (A 2 n))
;; 5n^2
(define (k n) (* 5 n n))


(f 3)
(g 11)

(h 0) ; 0
(h 1) ; 2^1
(h 2) ; 2^2
(h 3) ; 2^4
(h 4) ; 2^16

;; 解説
;; 2の2乗の2乗の2乗の...と繰り返した結果となる
;; http://nasada13.blogspot.com/2017/10/sicp-110-ackermann.html
;; (A 2 n)
;; (A 1 (A 2 (- n 1)))
;; → 2 ^ (A 2 (- n 1))
;; 2 ^ (A 1 (A 2 (- n 2))
;; → 2 ^ 2 ^ (A 2 (- n 2))
;; ...
;; → 2 ^ 2 ^ ... ^ 2 ^ (A 2 1)
;; → 2 ^ 2 ^ ... ^ 2 ^ 2

;; 考察
;; 計算結果が膨大になった結果を無視して数学的定義を考えて行ってしまった。
;; (g n)の結果を使って展開をすれば(h n)の結果も分かったはず
